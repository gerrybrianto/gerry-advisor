{"ast":null,"code":"import { forkJoin, Observable, Subscription } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./restaurant-list/restaurants.service\";\nimport * as i2 from \"@angular/google-maps\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./restaurant-list/restaurant-list.component\";\n\nfunction AppComponent_map_marker_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"map-marker\", 10);\n  }\n\n  if (rf & 2) {\n    const position_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"position\", position_r1)(\"options\", ctx_r0.markerOptions)(\"title\", ctx_r0.markerInfos.titles[i_r2]);\n  }\n}\n\nexport class AppComponent {\n  constructor(restaurantsService) {\n    this.restaurantsService = restaurantsService;\n    this.title = 'gerry-advisor';\n    this.googleMapOptions = {};\n    this.map = google.maps.Map;\n    this.infoWindow = google.maps.InfoWindow;\n    this.restaurantsWithRatings$ = new Observable();\n    this.markerInfos = {\n      titles: [],\n      positions: []\n    };\n    this.markerOptions = {\n      draggable: false\n    };\n    this.currentPosition = {\n      lat: 0,\n      lng: 0\n    };\n    this.restaurantsSubscriptions = new Subscription();\n    this.mapHeight = `${window.innerHeight - 80}px`;\n    this.mapWidth = `${window.innerWidth - 400}px`;\n  }\n\n  onResize() {\n    this.mapHeight = `${window.innerHeight - 80}px`;\n    this.mapWidth = `${window.innerWidth - 400}px`;\n  }\n\n  ngOnInit() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        this.currentPosition = pos;\n        this.setMapPos(pos, 15);\n        this.refreshRestaurantsList(null, pos);\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      this.handleLocationError(false, this.infoWindow, this.map.getCenter());\n    }\n  }\n\n  zoomOnRestaurant(restaurant) {\n    const pos = {\n      lat: restaurant.lat,\n      lng: restaurant.long\n    };\n    this.setMapPos(pos, 18);\n    console.log('gMapOptions: ', this.googleMapOptions);\n  }\n\n  resetPos() {\n    this.setMapPos(this.currentPosition, 15);\n  }\n\n  setMapPos(pos, zoom) {\n    this.googleMapOptions = {\n      center: {\n        lat: pos.lat,\n        lng: pos.lng\n      },\n      zoom: zoom\n    };\n  }\n\n  setcurrentPosition(event) {\n    this.currentPosition = {\n      lat: event.latLng ? event.latLng.lat() : 0,\n      lng: event.latLng ? event.latLng.lng() : 0\n    };\n    console.log('clicked position: ', this.currentPosition);\n  }\n\n  setRestaurantMarkersInfos(restaurant) {\n    this.markerInfos.positions.push({\n      lat: restaurant.lat,\n      lng: restaurant.long\n    });\n    this.markerInfos.titles.push(restaurant.restaurantName);\n  }\n\n  addMarker(marker) {\n    if (marker.title) {\n      this.markerInfos.titles.push(marker.title);\n    }\n\n    this.markerInfos.positions.push(marker.pos);\n    console.log('new marker: ', marker.title, marker.pos);\n  }\n\n  refreshRestaurantsList(event, pos) {\n    if (event) {\n      this.setcurrentPosition(event);\n    }\n\n    this.restaurantsSubscriptions.unsubscribe();\n    this.restaurantsWithRatings$ = this.restaurantsService.getRestaurants(pos ? pos : this.currentPosition).pipe(map(restaurants => restaurants.map(restaurant => this.getRestaurantRatings(restaurant))), switchMap(restaurantsWithRatings$ => forkJoin(restaurantsWithRatings$)));\n    this.restaurantsSubscriptions = this.restaurantsWithRatings$.subscribe(restaurantsWithRatings => {\n      this.markerInfos = {\n        titles: [],\n        positions: []\n      };\n      restaurantsWithRatings.map(restaurantWithRatings => {\n        this.setRestaurantMarkersInfos(restaurantWithRatings.restaurant);\n      });\n    });\n  }\n\n  addCustomRestaurant(restaurant) {}\n\n  addCustomRating() {}\n\n  getRestaurantRatings(restaurant) {\n    return this.restaurantsService.getReviews(restaurant.id).pipe(map(ratings => ({\n      restaurant,\n      ratings\n    })));\n  }\n\n  handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(browserHasGeolocation ? 'Error: The Geolocation service failed.' : \"Error: Your browser doesn't support geolocation.\");\n    infoWindow.open(this.map);\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.GooglePlacesService));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  hostBindings: function AppComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function AppComponent_resize_HostBindingHandler($event) {\n        return ctx.onResize($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  decls: 14,\n  vars: 8,\n  consts: [[1, \"page-container\"], [1, \"page-header\"], [1, \"fas\", \"fa-search\"], [1, \"page-content\"], [1, \"restaurants-list-container\"], [1, \"restaurants-list\", 3, \"currentPosition\", \"restaurantsWithRatings\", \"addMarker\", \"zoomOnRestaurant\", \"resetPos\"], [1, \"map-container\"], [1, \"map\", 3, \"width\", \"height\", \"options\", \"mapClick\"], [3, \"position\", \"options\", \"title\", 4, \"ngFor\", \"ngForOf\"], [1, \"page-footer\"], [3, \"position\", \"options\", \"title\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"h1\");\n      i0.ɵɵelement(3, \"i\", 2);\n      i0.ɵɵtext(4, \" Gerry Advisor\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"section\", 4)(7, \"app-restaurant-list\", 5);\n      i0.ɵɵlistener(\"addMarker\", function AppComponent_Template_app_restaurant_list_addMarker_7_listener($event) {\n        return ctx.addMarker($event);\n      })(\"zoomOnRestaurant\", function AppComponent_Template_app_restaurant_list_zoomOnRestaurant_7_listener($event) {\n        return ctx.zoomOnRestaurant($event);\n      })(\"resetPos\", function AppComponent_Template_app_restaurant_list_resetPos_7_listener() {\n        return ctx.resetPos();\n      });\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"section\", 6)(10, \"google-map\", 7);\n      i0.ɵɵlistener(\"mapClick\", function AppComponent_Template_google_map_mapClick_10_listener($event) {\n        return ctx.refreshRestaurantsList($event);\n      });\n      i0.ɵɵtemplate(11, AppComponent_map_marker_11_Template, 1, 3, \"map-marker\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(12, \"footer\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"router-outlet\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"currentPosition\", ctx.currentPosition)(\"restaurantsWithRatings\", i0.ɵɵpipeBind1(8, 6, ctx.restaurantsWithRatings$));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"width\", ctx.mapWidth)(\"height\", ctx.mapHeight)(\"options\", ctx.googleMapOptions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.markerInfos.positions);\n    }\n  },\n  dependencies: [i2.GoogleMap, i2.MapMarker, i3.NgForOf, i4.RouterOutlet, i5.RestaurantListComponent, i3.AsyncPipe],\n  styles: [\".page-content[_ngcontent-%COMP%] {\\n  grid-area: content;\\n  display: flex;\\n}\\n\\n.map-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.restaurants-list-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  width: 400px;\\n}\\n\\n.restaurants-list[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.ratings[_ngcontent-%COMP%] {\\n  color: red;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuc2NzcyIsIi4uL3N0eWxlcy9hYnN0cmFjdHMvX3ZhcmlhYmxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBQ0Usa0JBQUE7RUFDQSxhQUFBO0FBREY7O0FBSUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0FBREY7O0FBSUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQ2ZXO0FEY2I7O0FBSUE7RUFDRSxXQUFBO0FBREY7O0FBSUE7RUFDRSxVQUFBO0FBREYiLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSBcIi4uL3N0eWxlcy9hYnN0cmFjdHMvdmFyaWFibGVzXCI7XG5cbi5wYWdlLWNvbnRlbnQge1xuICBncmlkLWFyZWE6IGNvbnRlbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5tYXAtY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi5yZXN0YXVyYW50cy1saXN0LWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgd2lkdGg6IHZhcmlhYmxlcy4kbGlzdC13aWR0aDtcbn1cblxuLnJlc3RhdXJhbnRzLWxpc3Qge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnJhdGluZ3Mge1xuICBjb2xvcjogcmVkO1xufVxuIiwiLy9DT0xPUlNcbiRoZWFkZXItYmFja2dyb3VuZDogIzI0MjMyMztcblxuLy9DT01QT05FTlRTIEhFSUdIVCBBTkQgV0lEVEhcbiRoZWFkZXItaGVpZ2h0OiA4MHB4O1xuJGxpc3Qtd2lkdGg6IDQwMHB4O1xuJHBhZ2UtY29udGVudC1oZWlnaHQ6IGNhbGMoMTAwJSAtICN7JGhlYWRlci1oZWlnaHR9KTtcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["forkJoin","Observable","Subscription","map","switchMap","i0","ctx_r0","AppComponent","constructor","restaurantsService","googleMapOptions","google","maps","Map","infoWindow","InfoWindow","restaurantsWithRatings$","markerInfos","titles","positions","markerOptions","draggable","currentPosition","lat","lng","restaurantsSubscriptions","mapHeight","window","innerHeight","mapWidth","innerWidth","onResize","ngOnInit","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","setMapPos","refreshRestaurantsList","handleLocationError","getCenter","zoomOnRestaurant","restaurant","long","console","log","resetPos","zoom","center","setcurrentPosition","event","latLng","setRestaurantMarkersInfos","push","restaurantName","addMarker","marker","title","unsubscribe","getRestaurants","pipe","restaurants","getRestaurantRatings","subscribe","restaurantsWithRatings","restaurantWithRatings","addCustomRestaurant","addCustomRating","getReviews","id","ratings","browserHasGeolocation","setPosition","setContent","open","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["/home/gerry/angular-workspace/gerry-advisor/src/app/app.component.ts","/home/gerry/angular-workspace/gerry-advisor/src/app/app.component.html"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\nimport { forkJoin, Observable, Subscription } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Rating, Restaurant } from './restaurant-list/restaurants.model';\nimport { GooglePlacesService } from './restaurant-list/restaurants.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'gerry-advisor';\n  googleMapOptions: google.maps.MapOptions;\n  map: any;\n  mapHeight: string;\n  mapWidth: string;\n  infoWindow: any;\n  restaurantsWithRatings$: Observable<\n    { restaurant: Restaurant; ratings: Rating[] }[]\n  >;\n  markerInfos: { titles: string[]; positions: google.maps.LatLngLiteral[] };\n  markerOptions: google.maps.MarkerOptions;\n  currentPosition: { lat: number; lng: number };\n  restaurantsSubscriptions: Subscription;\n\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    this.mapHeight = `${window.innerHeight - 80}px`;\n    this.mapWidth = `${window.innerWidth - 400}px`;\n  }\n\n  constructor(private restaurantsService: GooglePlacesService) {\n    this.googleMapOptions = {};\n    this.map = google.maps.Map;\n    this.infoWindow = google.maps.InfoWindow;\n    this.restaurantsWithRatings$ = new Observable();\n    this.markerInfos = { titles: [], positions: [] };\n    this.markerOptions = { draggable: false };\n    this.currentPosition = { lat: 0, lng: 0 };\n    this.restaurantsSubscriptions = new Subscription();\n    this.mapHeight = `${window.innerHeight - 80}px`;\n    this.mapWidth = `${window.innerWidth - 400}px`;\n  }\n\n  ngOnInit(): void {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position: GeolocationPosition) => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          };\n          this.currentPosition = pos;\n          this.setMapPos(pos, 15);\n          this.refreshRestaurantsList(null, pos);\n        }\n      );\n    } else {\n      // Browser doesn't support Geolocation\n      this.handleLocationError(false, this.infoWindow, this.map.getCenter()!);\n    }\n  }\n\n  zoomOnRestaurant(restaurant: Restaurant): void {\n    const pos = {\n      lat: restaurant.lat,\n      lng: restaurant.long,\n    };\n    this.setMapPos(pos, 18);\n    console.log('gMapOptions: ', this.googleMapOptions);\n  }\n\n  resetPos(): void {\n    this.setMapPos(this.currentPosition, 15);\n  }\n\n  setMapPos(pos: { lat: number; lng: number }, zoom: number): void {\n    this.googleMapOptions = {\n      center: { lat: pos.lat, lng: pos.lng },\n      zoom: zoom,\n    };\n  }\n\n  setcurrentPosition(\n    event: google.maps.MapMouseEvent | google.maps.IconMouseEvent\n  ) {\n    this.currentPosition = {\n      lat: event.latLng ? event.latLng.lat() : 0,\n      lng: event.latLng ? event.latLng.lng() : 0,\n    };\n    console.log('clicked position: ', this.currentPosition);\n  }\n\n  setRestaurantMarkersInfos(restaurant: Restaurant): void {\n    this.markerInfos.positions.push({\n      lat: restaurant.lat,\n      lng: restaurant.long,\n    });\n    this.markerInfos.titles.push(restaurant.restaurantName);\n  }\n\n  addMarker(marker: { pos: google.maps.LatLngLiteral; title?: string }) {\n    if (marker.title) {\n      this.markerInfos.titles.push(marker.title);\n    }\n    this.markerInfos.positions.push(marker.pos);\n    console.log('new marker: ', marker.title, marker.pos);\n  }\n\n  refreshRestaurantsList(\n    event: google.maps.MapMouseEvent | google.maps.IconMouseEvent | null,\n    pos?: { lat: number; lng: number }\n  ): void {\n    if (event) {\n      this.setcurrentPosition(event);\n    }\n    this.restaurantsSubscriptions.unsubscribe();\n    this.restaurantsWithRatings$ = this.restaurantsService\n      .getRestaurants(pos ? pos : this.currentPosition)\n      .pipe(\n        map((restaurants) =>\n          restaurants.map((restaurant) => this.getRestaurantRatings(restaurant))\n        ),\n        switchMap((restaurantsWithRatings$) =>\n          forkJoin(restaurantsWithRatings$)\n        )\n      );\n    this.restaurantsSubscriptions = this.restaurantsWithRatings$.subscribe(\n      (restaurantsWithRatings) => {\n        this.markerInfos = { titles: [], positions: [] };\n        restaurantsWithRatings.map((restaurantWithRatings) => {\n          this.setRestaurantMarkersInfos(restaurantWithRatings.restaurant);\n        });\n      }\n    );\n  }\n\n  addCustomRestaurant(restaurant: Restaurant): void {}\n\n  addCustomRating(): void {}\n\n  private getRestaurantRatings(\n    restaurant: Restaurant\n  ): Observable<{ restaurant: Restaurant; ratings: Rating[] }> {\n    return this.restaurantsService\n      .getReviews(restaurant.id)\n      .pipe(map((ratings) => ({ restaurant, ratings })));\n  }\n\n  private handleLocationError(\n    browserHasGeolocation: boolean,\n    infoWindow: google.maps.InfoWindow,\n    pos: google.maps.LatLng\n  ): void {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(\n      browserHasGeolocation\n        ? 'Error: The Geolocation service failed.'\n        : \"Error: Your browser doesn't support geolocation.\"\n    );\n    infoWindow.open(this.map);\n  }\n}\n","<div class=\"page-container\">\n  <header class=\"page-header\">\n    <h1><i class=\"fas fa-search\"></i> Gerry Advisor</h1>\n  </header>\n  <div class=\"page-content\">\n    <section class=\"restaurants-list-container\">\n      <app-restaurant-list\n        class=\"restaurants-list\"\n        [currentPosition]=\"currentPosition\"\n        [restaurantsWithRatings]=\"restaurantsWithRatings$ | async\"\n        (addMarker)=\"addMarker($event)\"\n        (zoomOnRestaurant)=\"zoomOnRestaurant($event)\"\n        (resetPos)=\"resetPos()\"\n      ></app-restaurant-list>\n    </section>\n    <section class=\"map-container\">\n      <google-map\n        [width]=\"mapWidth\"\n        [height]=\"mapHeight\"\n        class=\"map\"\n        [options]=\"googleMapOptions\"\n        (mapClick)=\"refreshRestaurantsList($event)\"\n      >\n        <map-marker\n          *ngFor=\"let position of markerInfos.positions; let i = index\"\n          [position]=\"position\"\n          [options]=\"markerOptions\"\n          [title]=\"markerInfos.titles[i]\"\n        ></map-marker>\n      </google-map>\n    </section>\n  </div>\n  <footer class=\"page-footer\"></footer>\n</div>\n<router-outlet></router-outlet>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { forkJoin, Observable, Subscription } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./restaurant-list/restaurants.service\";\nimport * as i2 from \"@angular/google-maps\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./restaurant-list/restaurant-list.component\";\n\nfunction AppComponent_map_marker_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"map-marker\", 10);\n  }\n\n  if (rf & 2) {\n    const position_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"position\", position_r1)(\"options\", ctx_r0.markerOptions)(\"title\", ctx_r0.markerInfos.titles[i_r2]);\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(restaurantsService) {\n      this.restaurantsService = restaurantsService;\n      this.title = 'gerry-advisor';\n      this.googleMapOptions = {};\n      this.map = google.maps.Map;\n      this.infoWindow = google.maps.InfoWindow;\n      this.restaurantsWithRatings$ = new Observable();\n      this.markerInfos = {\n        titles: [],\n        positions: []\n      };\n      this.markerOptions = {\n        draggable: false\n      };\n      this.currentPosition = {\n        lat: 0,\n        lng: 0\n      };\n      this.restaurantsSubscriptions = new Subscription();\n      this.mapHeight = `${window.innerHeight - 80}px`;\n      this.mapWidth = `${window.innerWidth - 400}px`;\n    }\n\n    onResize() {\n      this.mapHeight = `${window.innerHeight - 80}px`;\n      this.mapWidth = `${window.innerWidth - 400}px`;\n    }\n\n    ngOnInit() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          this.currentPosition = pos;\n          this.setMapPos(pos, 15);\n          this.refreshRestaurantsList(null, pos);\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        this.handleLocationError(false, this.infoWindow, this.map.getCenter());\n      }\n    }\n\n    zoomOnRestaurant(restaurant) {\n      const pos = {\n        lat: restaurant.lat,\n        lng: restaurant.long\n      };\n      this.setMapPos(pos, 18);\n      console.log('gMapOptions: ', this.googleMapOptions);\n    }\n\n    resetPos() {\n      this.setMapPos(this.currentPosition, 15);\n    }\n\n    setMapPos(pos, zoom) {\n      this.googleMapOptions = {\n        center: {\n          lat: pos.lat,\n          lng: pos.lng\n        },\n        zoom: zoom\n      };\n    }\n\n    setcurrentPosition(event) {\n      this.currentPosition = {\n        lat: event.latLng ? event.latLng.lat() : 0,\n        lng: event.latLng ? event.latLng.lng() : 0\n      };\n      console.log('clicked position: ', this.currentPosition);\n    }\n\n    setRestaurantMarkersInfos(restaurant) {\n      this.markerInfos.positions.push({\n        lat: restaurant.lat,\n        lng: restaurant.long\n      });\n      this.markerInfos.titles.push(restaurant.restaurantName);\n    }\n\n    addMarker(marker) {\n      if (marker.title) {\n        this.markerInfos.titles.push(marker.title);\n      }\n\n      this.markerInfos.positions.push(marker.pos);\n      console.log('new marker: ', marker.title, marker.pos);\n    }\n\n    refreshRestaurantsList(event, pos) {\n      if (event) {\n        this.setcurrentPosition(event);\n      }\n\n      this.restaurantsSubscriptions.unsubscribe();\n      this.restaurantsWithRatings$ = this.restaurantsService.getRestaurants(pos ? pos : this.currentPosition).pipe(map(restaurants => restaurants.map(restaurant => this.getRestaurantRatings(restaurant))), switchMap(restaurantsWithRatings$ => forkJoin(restaurantsWithRatings$)));\n      this.restaurantsSubscriptions = this.restaurantsWithRatings$.subscribe(restaurantsWithRatings => {\n        this.markerInfos = {\n          titles: [],\n          positions: []\n        };\n        restaurantsWithRatings.map(restaurantWithRatings => {\n          this.setRestaurantMarkersInfos(restaurantWithRatings.restaurant);\n        });\n      });\n    }\n\n    addCustomRestaurant(restaurant) {}\n\n    addCustomRating() {}\n\n    getRestaurantRatings(restaurant) {\n      return this.restaurantsService.getReviews(restaurant.id).pipe(map(ratings => ({\n        restaurant,\n        ratings\n      })));\n    }\n\n    handleLocationError(browserHasGeolocation, infoWindow, pos) {\n      infoWindow.setPosition(pos);\n      infoWindow.setContent(browserHasGeolocation ? 'Error: The Geolocation service failed.' : \"Error: Your browser doesn't support geolocation.\");\n      infoWindow.open(this.map);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.GooglePlacesService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function AppComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 14,\n    vars: 8,\n    consts: [[1, \"page-container\"], [1, \"page-header\"], [1, \"fas\", \"fa-search\"], [1, \"page-content\"], [1, \"restaurants-list-container\"], [1, \"restaurants-list\", 3, \"currentPosition\", \"restaurantsWithRatings\", \"addMarker\", \"zoomOnRestaurant\", \"resetPos\"], [1, \"map-container\"], [1, \"map\", 3, \"width\", \"height\", \"options\", \"mapClick\"], [3, \"position\", \"options\", \"title\", 4, \"ngFor\", \"ngForOf\"], [1, \"page-footer\"], [3, \"position\", \"options\", \"title\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"h1\");\n        i0.ɵɵelement(3, \"i\", 2);\n        i0.ɵɵtext(4, \" Gerry Advisor\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"section\", 4)(7, \"app-restaurant-list\", 5);\n        i0.ɵɵlistener(\"addMarker\", function AppComponent_Template_app_restaurant_list_addMarker_7_listener($event) {\n          return ctx.addMarker($event);\n        })(\"zoomOnRestaurant\", function AppComponent_Template_app_restaurant_list_zoomOnRestaurant_7_listener($event) {\n          return ctx.zoomOnRestaurant($event);\n        })(\"resetPos\", function AppComponent_Template_app_restaurant_list_resetPos_7_listener() {\n          return ctx.resetPos();\n        });\n        i0.ɵɵpipe(8, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"section\", 6)(10, \"google-map\", 7);\n        i0.ɵɵlistener(\"mapClick\", function AppComponent_Template_google_map_mapClick_10_listener($event) {\n          return ctx.refreshRestaurantsList($event);\n        });\n        i0.ɵɵtemplate(11, AppComponent_map_marker_11_Template, 1, 3, \"map-marker\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(12, \"footer\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"router-outlet\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"currentPosition\", ctx.currentPosition)(\"restaurantsWithRatings\", i0.ɵɵpipeBind1(8, 6, ctx.restaurantsWithRatings$));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"width\", ctx.mapWidth)(\"height\", ctx.mapHeight)(\"options\", ctx.googleMapOptions);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.markerInfos.positions);\n      }\n    },\n    dependencies: [i2.GoogleMap, i2.MapMarker, i3.NgForOf, i4.RouterOutlet, i5.RestaurantListComponent, i3.AsyncPipe],\n    styles: [\".page-content[_ngcontent-%COMP%]{grid-area:content;display:flex}.map-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center}.restaurants-list-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;overflow-y:auto;overflow-x:hidden;width:400px}.restaurants-list[_ngcontent-%COMP%]{width:100%}.ratings[_ngcontent-%COMP%]{color:red}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}